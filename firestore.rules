rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /users/{userID} {
      // Allow users to read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // Allow authenticated users to read public truck information from other users
      // This is needed for displaying truck details when clicking map markers
      allow read: if request.auth != null && 
        resource.data.role == 'owner';
      
      // Allow admin operations and webhook updates
      allow write: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.resource.data.keys().hasAny(['subscriptionStatus', 'stripeSubscriptionId', 'plan']));
    }
    
    // Referrals collection - allow authenticated users to manage their referral records
    match /referrals/{userID} {
      // Allow users to create and read their own referral data
      allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // Allow any authenticated user to write referral data (temporary for debugging)
      allow write: if request.auth != null;
    }
    
    // Truck locations collection - allow users to manage their truck data
    match /truckLocations/{docId} {
      // Allow users to read and write their own truck data
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      
      // Allow creation if the ownerUid matches the authenticated user
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      
      // Allow read access for all authenticated users (for map display)
      allow read: if request.auth != null;
    }
    
    // Drops collection - allow owners to manage their drops and customers to read active drops
    match /drops/{dropId} {
      // Allow truck owners to create drops for their own truck
      allow create: if request.auth != null && request.auth.uid == request.resource.data.truckId;
      
      // Allow truck owners to read and update their own drops
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.truckId;
      
      // Allow all authenticated users to read active drops for discovery
      allow read: if request.auth != null;
    }
    
    // Pings collection - allow customers to create pings and owners to read them
    match /pings/{pingId} {
      // Allow any authenticated user to create pings
      allow create: if request.auth != null;
      
      // Allow any authenticated user to read pings (for heatmap)
      allow read: if request.auth != null;
    }
    
    // Notification records collection - allow users to manage their notification history
    match /notificationRecords/{userId} {
      // Allow users to read and write their own notification records
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow Cloud Functions to write notification records
      allow write: if request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    // Events collection - allow event organizers to manage their events
    match /events/{eventId} {
      // Allow event organizers to create, read, update, and delete their own events
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.organizerId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event-organizer';
      
      allow read, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
      
      // Allow all authenticated users to read published events for discovery
      allow read: if request.auth != null && 
        resource.data.status == 'published';
      
      // Allow truck owners to read events for application purposes
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }
    
    // Event applications collection - manage truck applications to events
    match /eventApplications/{applicationId} {
      // Allow truck owners to create applications for their own trucks
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.truckId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      
      // Allow truck owners to read and update their own applications
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.truckId;
      
      // Allow event organizers to read and update applications for their events
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
      
      // Allow event organizers to delete applications (reject permanently)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
    }
    
    // Nudge history collection - allow users to manage their upgrade nudge history
    match /nudgeHistory/{userId} {
      // Allow users to read and write their own nudge history
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}