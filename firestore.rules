rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Test collection for connectivity debugging
    match /test/{testDoc} {
      allow read, write: if true;
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /users/{userID} {
      // Allow users to read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // Allow authenticated users to read public truck information from other users
      // This is needed for displaying truck details when clicking map markers
      allow read: if request.auth != null && 
        (resource.data.role == 'owner' || 
         resource.data.role == 'truck_owner' ||
         resource.data.kitchenType != null);
        
      // Allow authenticated users to read event organizer information for logo display
      // This is needed for displaying organization logos on event markers
      allow read: if request.auth != null && 
        resource.data.role == 'event-organizer';
      
      // TEMPORARY: Allow all authenticated users to read customer profiles for testing
      // This will be restricted later to only mobile kitchen owners
      allow read: if request.auth != null && resource.data.role == 'customer';
      
      // Allow mobile kitchen owners to read customer profiles for order management
      // This is needed for displaying customer names and profile pictures in orders
      // allow read: if request.auth != null && 
      //   resource.data.role == 'customer' &&
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      
      // Allow admin operations and webhook updates
      allow write: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.resource.data.keys().hasAny(['subscriptionStatus', 'stripeSubscriptionId', 'plan']));
    }
    
    // Referrals collection - allow authenticated users to manage their referral records
    match /referrals/{userID} {
      // Allow users to create and read their own referral data
      allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // Allow any authenticated user to write referral data (temporary for debugging)
      allow write: if request.auth != null;
    }
    
    // Truck locations collection - allow users to manage their truck data
    match /truckLocations/{docId} {
      // Allow users to read and write their own truck data (docId is the user's UID)
      allow read, write: if request.auth != null && request.auth.uid == docId;
      
      // Allow creation if the authenticated user matches the docId
      allow create: if request.auth != null && request.auth.uid == docId;
      
      // Also allow if ownerUid field exists and matches (backward compatibility)
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      
      // Allow creation if the ownerUid matches the authenticated user (backward compatibility)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      
      // Allow all authenticated users to read truck locations (privacy filtering done in app code)
      allow read: if request.auth != null;
    }
    
    // Trucks collection - allow truck owners to manage their truck data and activity tracking
    match /trucks/{docId} {
      // Allow users to read and write their own truck data (docId is the user's UID)
      allow read, write: if request.auth != null && request.auth.uid == docId;
      
      // Allow creation if the authenticated user matches the docId
      allow create: if request.auth != null && request.auth.uid == docId;
      
      // Also allow if ownerUid field exists and matches (backward compatibility)
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      
      // Allow creation if the ownerUid matches the authenticated user (backward compatibility)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      
      // Allow all authenticated users to read truck data (privacy filtering done in app code)
      allow read: if request.auth != null;
    }
    
    // Drops collection - allow owners to manage their drops and customers to read active drops
    match /drops/{dropId} {
      // Allow truck owners to create drops for their own truck
      allow create: if request.auth != null && request.auth.uid == request.resource.data.truckId;
      
      // Allow truck owners to read and update their own drops
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.truckId;
      
      // Allow customers to update drops for claiming (adding themselves to claimedBy array)
      allow update: if request.auth != null && 
        request.auth.uid != resource.data.truckId && // Not the truck owner
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['claimedBy']) && // Only modifying claimedBy field
        request.resource.data.claimedBy.hasAll(resource.data.claimedBy) && // Can only add, not remove existing claims
        request.resource.data.claimedBy.size() == resource.data.claimedBy.size() + 1 && // Adding exactly one claim
        request.auth.uid in request.resource.data.claimedBy && // User is adding themselves
        !(request.auth.uid in resource.data.claimedBy); // User hasn't already claimed
      
      // Allow all authenticated users to read active drops for discovery
      allow read: if request.auth != null;
    }
    
    // User Claims collection - allow users to create claims and truck owners to read them
    match /userClaims/{claimId} {
      // Allow customers to create their own claims
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Allow users to read their own claims
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow truck owners to read claims for their drops (to view claim codes)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/drops/$(resource.data.dropId)) &&
        get(/databases/$(database)/documents/drops/$(resource.data.dropId)).data.truckId == request.auth.uid;
    }
    
    // Pings collection - allow customers to create pings and owners to read them
    match /pings/{pingId} {
      // Allow any authenticated user to create pings
      allow create: if request.auth != null;
      
      // Allow any authenticated user to read pings (for heatmap)
      allow read: if request.auth != null;
    }
    
    // Notification records collection - allow users to manage their notification history
    match /notificationRecords/{userId} {
      // Allow users to read and write their own notification records
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow Cloud Functions to write notification records
      allow write: if request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    // Events collection - allow event organizers to manage their events
    match /events/{eventId} {
      // Allow event organizers to create, read, update, and delete their own events
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.organizerId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event-organizer';
      
      allow read, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
      
      // Allow all authenticated users to read any events for map display and discovery
      // This includes draft, published, active, completed events for proper map functionality
      allow read: if request.auth != null;
    }
    
    // Event applications collection - manage truck applications to events
    match /eventApplications/{applicationId} {
      // Allow truck owners to create applications for their own trucks
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.truckId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      
      // Allow truck owners to read and update their own applications
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.truckId;
      
      // Allow event organizers to read and update applications for their events
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
      
      // Allow event organizers to delete applications (reject permanently)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
    }
    
    // Nudge history collection - allow users to manage their upgrade nudge history
    match /nudgeHistory/{userId} {
      // Allow users to read and write their own nudge history
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Menu items collection - allow truck owners to manage their menu items
    match /menuItems/{itemId} {
      // Allow truck owners to create menu items for their own truck
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId;
      
      // Allow truck owners to read, update, and delete their own menu items
      allow read, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
      
      // Allow all authenticated users to read menu items for discovery
      allow read: if request.auth != null;
    }
    
    // Favorites collection - allow customers to manage their favorite trucks
    match /favorites/{favoriteId} {
      // Allow users to create, read, update, and delete their own favorites
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow users to create favorites if they are the owner of the favorite
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow truck owners to read favorites where they are the truck being favorited (for analytics)
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.truckId;
        
      // Allow all authenticated users to read favorites for displaying favorite counts on truck markers
      allow read: if request.auth != null;
    }
    
    // Event attendance collection - allow users to manage their event attendance records
    match /eventAttendance/{attendanceId} {
      // Allow authenticated users to read all attendance records (for analytics)
      allow read: if request.auth != null;
      
      // Allow users to create, update, and delete their own attendance records
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow users to create attendance records if they are the owner of the record
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    // Event interest collection - allow users to manage their event interest records
    match /eventInterest/{interestId} {
      // Allow authenticated users to read all interest records (for analytics)
      allow read: if request.auth != null;
      
      // Allow users to create, update, and delete their own interest records
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow users to create interest records if they are the owner of the record
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Orders collection - allow customers, mobile kitchen owners, and event organizers to place pre-orders
    match /orders/{orderId} {
      // Allow customers to read their own orders (supporting both customerId and userId fields)
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.userId);
      
      // Allow truck owners to read and update orders for their truck
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.truckId;
      
      // Allow ANY authenticated user to create pre-orders (customers, mobile kitchen owners, event organizers)
      // This enables the pre-order and payment feature for all user types
      allow create: if request.auth != null;
      
      // Allow order updates by customers for their own orders (for status tracking)
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.userId);
    }
    
    // Catering requests collection - allow authenticated users to create catering requests
    match /cateringRequests/{requestId} {
      // Allow authenticated users to create catering requests
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow users to read their own catering requests
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow truck owners to read catering requests for their truck
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.truckOwnerId;
      
      // Allow truck owners to update status of catering requests for their truck
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.truckOwnerId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'response', 'updatedAt']);
    }
    
    // Festival booking requests collection - allow event organizers to create festival booking requests
    match /festivalBookingRequests/{requestId} {
      // Allow event organizers to create festival booking requests
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.organizerId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event-organizer';
      
      // Allow event organizers to read their own festival booking requests
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.organizerId;
      
      // Allow truck owners to read festival booking requests for their truck
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.truckOwnerId;
      
      // Allow truck owners to update status of festival booking requests for their truck
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.truckOwnerId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'response', 'updatedAt']);
    }
    
    // Reviews collection - allow customers to write reviews and everyone to read them
    match /reviews/{reviewId} {
      // Temporarily allow all operations for debugging
      allow read, write: if true;
    }
  }
}